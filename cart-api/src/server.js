// server.js
require('dotenv').config();

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const morgan = require('morgan');
const helmet = require('helmet');
const compression = require('compression');
const rateLimit = require('express-rate-limit');

// --- Routes & Middleware ---
const familiesRoutes = require('./routes/families');
const authRoutes = require('./routes/auth');
const usersRoutes = require('./routes/users');
const requireAuth = require('./middleware/requireAuth');

const app = express();

// ---------- Middlewares ◊ë◊°◊ô◊° ---------- //
app.set('trust proxy', 1); // ◊ê◊ù ◊™◊®◊ô◊• ◊û◊ê◊ó◊ï◊®◊ô ◊§◊®◊ï◊ß◊°◊ô/◊®◊†◊ì◊ê◊®/◊ï◊®◊¶◊ú
app.use(helmet());         // ◊õ◊ï◊™◊®◊ï◊™ ◊ê◊ë◊ò◊ó◊î ◊ë◊°◊ô◊°◊ô◊ï◊™
app.use(compression());    // ◊ì◊ó◊ô◊°◊î
app.use(cors());           // CORS (◊ê◊§◊©◊® ◊ú◊î◊ß◊©◊ô◊ó origin ◊ú◊§◊ô ◊î◊¶◊ï◊®◊ö)
app.use(express.json({ limit: '2mb' })); // ◊í◊ï◊£ ◊ë◊ß◊©◊ï◊™ JSON
app.use(morgan('dev'));    // ◊ú◊ï◊í◊ô◊ù ◊ú◊§◊ô◊™◊ï◊ó

// Rate limit ◊ß◊ú ◊¢◊ú ◊õ◊ú ◊î-API (◊ê◊§◊©◊® ◊ú◊î◊ß◊©◊ô◊ó ◊ú◊§◊ô ◊¶◊ï◊®◊ö)
app.use('/api/', rateLimit({ windowMs: 15 * 60 * 1000, max: 1000 }));

// ---------- Health ---------- //
app.get('/api/v1/health', (req, res) => res.json({ ok: true }));

// ---------- Routes ---------- //
// ‚ö†Ô∏è ◊°◊ì◊® ◊ó◊©◊ï◊ë: auth ◊ú◊§◊†◊ô requireAuth
app.use('/api/v1/auth', authRoutes);

// ◊®◊ê◊ï◊ò◊ô◊ù ◊©◊ì◊ï◊®◊©◊ô◊ù ◊î◊™◊ó◊ë◊®◊ï◊™
app.use('/api/v1/users', requireAuth, usersRoutes);
app.use('/api/v1/families', requireAuth, familiesRoutes);
// ◊ê◊ù ◊™◊®◊¶◊î ◊ë◊¢◊™◊ô◊ì ◊ú◊§◊™◊ï◊ó ◊ó◊ú◊ß ◊û◊î◊û◊°◊ú◊ï◊ú◊ô◊ù ◊ú◊¶◊ô◊ë◊ï◊® ‚Äì ◊™◊ï◊¶◊ô◊ê ◊ê◊™ requireAuth ◊ú◊®◊û◊™ ◊î◊®◊ê◊ï◊ò◊® ◊î◊§◊†◊ô◊û◊ô◊™

// ---------- 404 ---------- //
app.use((req, res, next) => {
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'Not found' });
  }
  next();
});

// ---------- Error Handler ◊û◊®◊ï◊õ◊ñ ---------- //
/* eslint-disable no-unused-vars */
app.use((err, req, res, next) => {
  console.error('‚ùå API error:', err);

  // ◊©◊í◊ô◊ê◊ï◊™ ◊ï◊ú◊ô◊ì◊¶◊ô◊î/◊û◊ï◊†◊í◊ï ◊†◊§◊ï◊¶◊ï◊™
  if (err.name === 'ValidationError') {
    return res.status(400).json({ error: 'Validation error', details: err.errors });
  }
  if (err.name === 'CastError') {
    return res.status(400).json({ error: 'Invalid id' });
  }
  if (err.code === 11000) {
    return res.status(409).json({ error: 'Duplicate key', key: err.keyValue });
  }

  res.status(err.status || 500).json({ error: err.message || 'Server error' });
});
/* eslint-enable no-unused-vars */

// ---------- Mongo & Server ---------- //
const PORT = process.env.PORT || 3000;

mongoose
  .connect(process.env.MONGO_URI)
  .then(() => {
    console.log('‚úÖ Mongo connected');
    app.listen(PORT, () => console.log(`üöÄ API running on :${PORT}`));
  })
  .catch((err) => {
    console.error('‚ùå Mongo connection error', err);
    process.exit(1);
  });
